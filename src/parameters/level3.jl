include("level3/prime.jl")
include("level3/constants.jl")
include("level3/precomputed_order_data.jl")

include("../quaternion/order.jl")
include("../quaternion/cornacchia.jl")
include("../quaternion/ideal.jl")
include("../quaternion/klpt.jl")

include("global_data.jl")
include("order_data.jl")

include("../elliptic_curves/dlog.jl")
include("../ideal_to_isogeny/ideal_to_isogeny.jl")
include("../rii/quat_action.jl")
include("../rii/d2isogeny.jl")
include("../rii/rii.jl")
include("../utilities/for_compression.jl")
include("../sqisign2d_push/sqisign2d_push.jl")

const StrategiesDim2 = Dict(
    ExponentFull => compute_strategy(ExponentFull-2, 2, 1),
    ExponentFull-1 => compute_strategy(ExponentFull-3, 2, 1),
    ExponentFull-2 => compute_strategy(ExponentFull-4, 2, 1),
    ExponentFull-3 => compute_strategy(ExponentFull-5, 2, 1),
    ExponentFull-4 => compute_strategy(ExponentFull-6, 2, 1),
    ExponentFull-5 => compute_strategy(ExponentFull-7, 2, 1),
    ExponentForId2IsoDim2 => compute_strategy(ExponentForId2IsoDim2-2, 2, 1),
    ExponentForDim2 => compute_strategy(ExponentForDim2-2, 2, 1)
)
const StrategiesDim1 = Dict(
    ExponentForDim1 => compute_strategy(div(ExponentForDim1,2) - 1, 1, 1),
    ExponentForId2IsoDim1 => compute_strategy(div(ExponentForId2IsoDim1, 2) - 1, 1, 1),
    SQISIGN_challenge_length => compute_strategy(div(SQISIGN_challenge_length, 2) - 1, 1, 1),
)

function make_E0_data()
    _, T = polynomial_ring(GF(p), "T")
    Fp2, Fp2_i = finite_field(T^2 + 1, "i")

    A0 = Fp2(0)

    # constatns from precompute/level1torsion.sage
    P2e = Point(1270540218479842429271542770584777239225109491313965181546414934050992145942193163688840846360466894081200894264278089*Fp2_i + 9725297511770241205636002831527395895167893689317526676743466413750928989360182814664091744712685866104817039739724808, 4155911138294007083715320906233296166418427909206405905543105132737970509605706840669520299225620588222672197779712720*Fp2_i + 11739560476319858940932610736536016944407409326844017678355184582259923039549497001135021628807286956440681666586969516)
    Q2e = Point(13859830160935637588243608627870370461925510388544766338945729733179365014312735711094237395515340711988544254013539254*Fp2_i + 5405072867645238811879148566927751805982726190541204843748678253479428170894746060118986497163121739964928108538092535, 11739560476319858940932610736536016944407409326844017678355184582259923039549497001135021628807286956440681666586969516*Fp2_i + 10974459241121472933799830492221851534732191970652325614949039534492386650649222034113557942650187017847072950498104623)
    M_i_2e = [0 5043456793138493339171717132818382567050206626619577173497381555743452386751642958261026080625269202023248382759272447; 1 0]
    M_ij_2e = [1576168384470490594084637585090132277983229195503645961955579271613907520899285717395766012893441570023469155588153968 1501412966698330155679591488009076850216943485225749548198055208507813263765244968745515281353060944163607460975546112; 1501412966698330155679591488009076850216943485225749548198055208507813263765244968745515281353060944163607460975546113 3467288408668002745087079547728250289066977431115931211541802284129544865852357240865260067731827631999779227171118480]
    M_1k_2e = [3542043826440163183492125644809305716833263141393827625299326347235639122986397989515510799272208257859640921783726336 1576168384470490594084637585090132277983229195503645961955579271613907520899285717395766012893441570023469155588153968; 1576168384470490594084637585090132277983229195503645961955579271613907520899285717395766012893441570023469155588153968 1501412966698330155679591488009076850216943485225749548198055208507813263765244968745515281353060944163607460975546113]
    M44inv_chall
    M44inv_chall2 = [4136731235339945612987964203619525623913392948062574816020059146475836448350965511773163667434149812955597343887105 39313869581683053618803059015755888025040114585437351430300757960167071732099917672218903556839971249602592014425488 39313869581683053618803059015755888025040114585437351430300757960167071732099917672218903556839971249602592014425488 35265274961054533599291075896524088181166346322402871851928234257769885323146245099641102587450765827851030646419712; 39313869581683053618803059015755888025040114585437351430300757960167071732099917672218903556839971249602592014425488 35265274961054533599291075896524088181166346322402871851928234257769885323146245099641102587450765827851030646419712 35265274961054533599291075896524088181166346322402871851928234257769885323146245099641102587450765827851030646419711 88136614711425593475981084387725780039624685028095237647535444078650039397292939195362698044944391204035975881328; 176273229422851186951962168775451560079249370056190475295070888157300078794585878390725396089888782408071951762656 8273462470679891225975928407239051247826785896125149632040118292951672896701931023546327334868299625911194687774209 8273462470679891225975928407239051247826785896125149632040118292951672896701931023546327334868299625911194687774209 39225732966971628025327077931368162245000489900409256192653222516088421692702624733023540858795026858398556038544160; 31128543725714587986303111692904562557252953374340297035908175111294048874795279587867938920016616014895433302532607 176273229422851186951962168775451560079249370056190475295070888157300078794585878390725396089888782408071951762656 176273229422851186951962168775451560079249370056190475295070888157300078794585878390725396089888782408071951762656 8273462470679891225975928407239051247826785896125149632040118292951672896701931023546327334868299625911194687774209]
    xP3 = Proj1(11864762999581334792448866423100085446141405791431454142970151619768419905752701917057132748260773885312550653132298037*Fp2_i)
    xQ3 = Proj1(3265607379834145225066284975355062255009214088427277377521993047461937254502226957725945493615033720757194495145519306*Fp2_i)
    xPQ3 = Proj1(Fp2(1466588593642293488852442007990059682667432104864805748629509105556148009008273681284688377101019844491867502407827515))
    M_i_3 = [0 1; 2 0]
    M_ij_3 = [0 0; 2 0]
    M_1k_3 = [0 0; 0 1]

    a24_0 = A_to_a24(A0)
    xP2e = Proj1(P2e.X, P2e.Z)
    xQ2e = Proj1(Q2e.X, Q2e.Z)
    PQ2e = add(P2e, -Q2e, Proj1(A0))
    xPQ2e = Proj1(PQ2e.X, PQ2e.Z)
    xP2e_id2iso_d2 = xDBLe(xP2e, a24_0, ExponentFull - ExponentForId2IsoDim2 - 2)
    xQ2e_id2iso_d2= xDBLe(xQ2e, a24_0, ExponentFull - ExponentForId2IsoDim2 - 2)
    xPQ2e_is2iso_d2 = xDBLe(xPQ2e, a24_0, ExponentFull - ExponentForId2IsoDim2 - 2)

    # precomputed values for discrete logarithm
    tp_table = make_pairing_table(A0, P2e, ExponentFull)
    tp_P2e_Q2e = Tate_pairing_P0(Q2e, tp_table, Cofactor)
    window_size = 3
    fq_dlog_table1, fq_dlog_table2 = make_dlog_table(tp_P2e_Q2e, ExponentFull, window_size)
    strategy_dlog = compute_strategy(div(ExponentFull, window_size) - 1, window_size, 1)
    dlog_data_full = DlogData(ExponentFull, window_size, fq_dlog_table1, fq_dlog_table2, strategy_dlog)

    dlog_data = Dict{Int, DlogData}(ExponentFull => dlog_data_full)
    for d in [SQISIGN_challenge_length, 2*SQISIGN_challenge_length, ExponentSum, ExponentForDim2]
        base = tp_P2e_Q2e^(BigInt(2)^(ExponentFull - d))
        fq_dlog_table1, fq_dlog_table2 = make_dlog_table(base, d, window_size)
        strategy_dlog = compute_strategy(div(d, window_size) - 1, window_size, 1)
        dlog_data[d] = DlogData(d, window_size, fq_dlog_table1, fq_dlog_table2, strategy_dlog)
    end

    DegreesOddTorsionBases = [3]
    ExponentsOddTorsionBases = [1]
    OddTorsionBases = [[xP3, xQ3, xPQ3]]

    Matrices_2e = [M_i_2e, M_ij_2e, M_1k_2e]
    Matrices_odd = [[M_i_3, M_ij_3, M_1k_3]]

    w = Weil_pairing_2power(A0, P2e, Q2e, ExponentFull)

    # make constants for isomorphism to the curve E_A0
    _, T = polynomial_ring(Fp2, "T")
    As = roots((256 * (T^2 - 3)^3 - 1728 * (T^2 - 4))/T^2)
    A0d = As[1]
    beta = -A0d/3
    gamma = square_root(1 / (1 - 3*beta^2))
    A0dd = As[2]
    beta_d = -A0dd/3
    gamma_d = square_root(1 / (1 - 3*beta_d^2))
    function isomorphism_to_A0(A::Proj1{FqFieldElem}, Ps::Vector{Proj1{FqFieldElem}})
        if A == Proj1(A0)
            return Ps
        elseif A == Proj1(A0d)
            return [Proj1(gamma*(P.X - beta*P.Z), P.Z) for P in Ps]
        elseif A == Proj1(A0dd)
            return [Proj1(gamma_d*(P.X - beta_d*P.Z), P.Z) for P in Ps]
        else
            throw(ArgumentError("A is not A0d or A0dd"))
        end
    end

    return Fp2, E0Data(A0, A0d, A0dd, a24_0, jInvariant_A(A0), P2e, Q2e, xP2e, xQ2e, xPQ2e, xP2e_id2iso_d2, xQ2e_id2iso_d2, xPQ2e_is2iso_d2, DegreesOddTorsionBases, ExponentsOddTorsionBases, OddTorsionBases, Matrices_2e, M44inv_chall, M44inv_chall2, Matrices_odd, w, isomorphism_to_A0, dlog_data, tp_table)
end

# Fp2 and values in Fp2
function make_precomputed_values()
    Fp2, E0 = make_E0_data()

    precomputed_orders_data = [order_data_2, order_data_13, order_data_15]
    orders_data = [compute_order(Fp2, E0, order_data) for order_data in precomputed_orders_data]
    @assert orders_data[1].j_inv == 8000
    @assert orders_data[2].j_inv^2 - 6896880000*orders_data[2].j_inv - 567663552000000 == 0
    @assert orders_data[3].j_inv^2 + 191025*orders_data[3].j_inv - 121287375 == 0

    return GlobalData(Fp2, E0, orders_data)
end