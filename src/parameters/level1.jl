include("level1/prime.jl")
include("level1/constants.jl")
include("level1/precomputed_order_data.jl")

include("../quaternion/order.jl")
include("../quaternion/cornacchia.jl")
include("../quaternion/ideal.jl")
include("../quaternion/klpt.jl")

include("global_data.jl")
include("order_data.jl")

include("../elliptic_curves/dlog.jl")
include("../ideal_to_isogeny/ideal_to_isogeny.jl")
include("../rii/quat_action.jl")
include("../rii/d2isogeny.jl")
include("../rii/rii.jl")
include("../utilities/for_compression.jl")
include("../sqisign2d_push/sqisign2d_push.jl")

StrategyChallenge = compute_strategy(div(SQISIGN_challenge_length, 2) - 1, 1, 1)

const StrategyId2IsoDim2 = compute_strategy(ExponentForId2IsoDim2 - 2, 2, 1)
const StrategiesDim1 = Dict(
    ExponentForIsogenyDim1 => compute_strategy(div(ExponentForIsogenyDim1,2) - 1, 1, 1),
    ExponentForId2IsoDim1 => compute_strategy(div(ExponentForId2IsoDim1, 2) - 1, 1, 1),
    SQISIGN_challenge_length => compute_strategy(div(SQISIGN_challenge_length, 2) - 1, 1, 1),
)

function make_E0_data()
    _, T = polynomial_ring(GF(p), "T")
    Fp2, Fp2_i = finite_field(T^2 + 1, "i")

    A0 = Fp2(0)

    # constatns from precompute/level1torsion.sage
    P2e = Point(510599770093379928286853630949525248711036325179929314269549478384881957537100136*Fp2_i + 343750604695410387912217823010162232241539857512272243298092733845132145062831193, 116253297778416631807463026432720082754440670250446904034457726575089191491609267*Fp2_i + 326542424945756024389210058174304864491231248708721827586127207022744043686526568)
    Q2e = Point(171184051335937830367132328781629152729017344531362326794776776253710549782843031*Fp2_i + 338033216733907370741768136720992169198513812199019397766233520793460362257111974, 326542424945756024389210058174304864491231248708721827586127207022744043686526568*Fp2_i + 565530523650901126846522933298434318685612999460844737029868528063503315828333900)
    M_i_2e = [0 29642774844752946028434172162224104410437116074403984394101141506025761187823615; 1 0]
    M_ij_2e = [4918172560678423944327024484065372495675441797220986530517369873295928308265980 7346173186373086674965501053762419821868520676815870448957432056174365923770096; 7346173186373086674965501053762419821868520676815870448957432056174365923770097 24724602284074522084107147678158731914761674277182997863583771632729832879557636]
    M_1k_2e = [22296601658379859353468671108461684588568595397588113945143709449851395264053520 4918172560678423944327024484065372495675441797220986530517369873295928308265980; 4918172560678423944327024484065372495675441797220986530517369873295928308265980 7346173186373086674965501053762419821868520676815870448957432056174365923770097]
    M44inv_chall
    M44inv_chall
    xP23 = Proj1(76222984790838837243831216871595132173083337843856978389788679389160885478034891*Fp2_i + 307036441578265054885483403580168999712158902946166752340091233562452805111240010)
    xQ23 = Proj1(290498534884365654869205654668678246012659317214745311993235637191836745585256677*Fp2_i)
    xPQ23 = Proj1(483748787103273108302561004124709563864984018526835562418536417450556089854601984*Fp2_i + 666825356716360289024793723330107894530097593345561635842983548241375516147257780)
    M_i_23 = [21 11; 10 2]
    M_ij_23 = [21 11; 8 2]
    M_1k_23 = [1 0; 19 0]
    xP3 = Proj1(523202457296285681073940011327355151020618400688971341854490257296237838794119902*Fp2_i + 442890278809682197937247951308121764548497706549319734793075418764245622319014127)
    xQ3 = Proj1(523202457296285681073940011327355151020618400688971341854490257296237838794119902*Fp2_i + 238893542619635560716738008423032636891555963161971906271250835874346885000929040)
    xPQ3 = Proj1(158581364133032077580045948403799250419435269022320299209835997342354668525823265*Fp2_i + 238893542619635560716738008423032636891555963161971906271250835874346885000929040)
    M_i_3 = [2 1; 1 1]
    M_ij_3 = [2 0; 0 1]
    M_1k_3 = [2 1; 2 2]
    xP7 = Proj1(674097005961802804905043278019096376672040597147663338138217607409384948890805762*Fp2_i + 672768795217905819170716206490965263541449381439744284901168746814439931011868947)
    xQ7 = Proj1(243590733417295454995891801161124848629365329891636307888101444561685077617579505*Fp2_i + 350107435000951307756807781634230233727736595663216378847409015276214974863638870)
    xPQ7 = Proj1(7686815467514953748942681712058024768013072563628302926108647229207558429137405*Fp2_i + 672768795217905819170716206490965263541449381439744284901168746814439931011868947)
    M_i_7 = [6 4; 3 1]
    M_ij_7 = [0 3; 1 0]
    M_1k_7 = [5 4; 1 3]

    a24_0 = A_to_a24(A0)
    xP2e = Proj1(P2e.X, P2e.Z)
    xQ2e = Proj1(Q2e.X, Q2e.Z)
    PQ2e = add(P2e, -Q2e, Proj1(A0))
    xPQ2e = Proj1(PQ2e.X, PQ2e.Z)
    xP2e_id2iso_d2 = xDBLe(xP2e, a24_0, ExponentFull - ExponentForId2IsoDim2 - 2)
    xQ2e_id2iso_d2= xDBLe(xQ2e, a24_0, ExponentFull - ExponentForId2IsoDim2 - 2)
    xPQ2e_is2iso_d2 = xDBLe(xPQ2e, a24_0, ExponentFull - ExponentForId2IsoDim2 - 2)

    # precomputed values for discrete logarithm
    tp_table = make_pairing_table(A0, P2e, ExponentFull)
    tp_P2e_Q2e = Tate_pairing_P0(Q2e, tp_table, Cofactor)
    window_size = 3
    fq_dlog_table1, fq_dlog_table2 = make_dlog_table(tp_P2e_Q2e, ExponentFull, window_size)
    strategy_dlog = compute_strategy(div(ExponentFull, window_size) - 1, window_size, 1)
    dlog_data_full = DlogData(ExponentFull, window_size, fq_dlog_table1, fq_dlog_table2, strategy_dlog)

    base = tp_P2e_Q2e^(BigInt(2)^(ExponentFull - SQISIGN_challenge_length))
    fq_dlog_table1_c, fq_dlog_table2_c = make_dlog_table(base, SQISIGN_challenge_length, window_size)
    strategy_dlog_c = compute_strategy(div(SQISIGN_challenge_length, window_size) - 1, window_size, 1)
    dlog_data_chall = DlogData(SQISIGN_challenge_length, window_size, fq_dlog_table1_c, fq_dlog_table2_c, strategy_dlog_c)

    base = tp_P2e_Q2e^(BigInt(2)^(ExponentFull - 2*SQISIGN_challenge_length))
    fq_dlog_table1_c2, fq_dlog_table2_c2 = make_dlog_table(base, 2*SQISIGN_challenge_length, window_size)
    strategy_dlog_c2 = compute_strategy(div(2*SQISIGN_challenge_length, window_size) - 1, window_size, 1)
    dlog_data_chall2 = DlogData(2*SQISIGN_challenge_length, window_size, fq_dlog_table1_c2, fq_dlog_table2_c2, strategy_dlog_c2)

    base = tp_P2e_Q2e^(BigInt(2)^(ExponentFull - ExponentForTorsion))
    fq_dlog_table1_res, fq_dlog_table2_res = make_dlog_table(base, ExponentForTorsion, window_size)
    strategy_dlog_res = compute_strategy(div(ExponentForTorsion, window_size) - 1, window_size, 1)
    dlog_data_res = DlogData(ExponentForTorsion, window_size, fq_dlog_table1_res, fq_dlog_table2_res, strategy_dlog_res)

    DegreesOddTorsionBases = [3, 7, 23]
    ExponentsOddTorsionBases = [1, 1, 1]
    OddTorsionBases = [[xP3, xQ3, xPQ3], [xP7, xQ7, xPQ7], [xP23, xQ23, xPQ23]]

    Matrices_2e = [M_i_2e, M_ij_2e, M_1k_2e]
    Matrices_odd = [[M_i_3, M_ij_3, M_1k_3], [M_i_7, M_ij_7, M_1k_7], [M_i_23, M_ij_23, M_1k_23]]

    w = Weil_pairing_2power(A0, P2e, Q2e, ExponentFull)

    # make constants for isomorphism to the curve E_A0
    _, T = polynomial_ring(Fp2, "T")
    As = roots((256 * (T^2 - 3)^3 - 1728 * (T^2 - 4))/T^2)
    A0d = As[1]
    beta = -A0d/3
    gamma = square_root(1 / (1 - 3*beta^2))
    A0dd = As[2]
    beta_d = -A0dd/3
    gamma_d = square_root(1 / (1 - 3*beta_d^2))
    function isomorphism_to_A0(A::Proj1{FqFieldElem}, Ps::Vector{Proj1{FqFieldElem}})
        if A == Proj1(A0)
            return Ps
        elseif A == Proj1(A0d)
            return [Proj1(gamma*(P.X - beta*P.Z), P.Z) for P in Ps]
        elseif A == Proj1(A0dd)
            return [Proj1(gamma_d*(P.X - beta_d*P.Z), P.Z) for P in Ps]
        else
            throw(ArgumentError("A is not A0d or A0dd"))
        end
    end

    return Fp2, E0Data(A0, A0d, A0dd, a24_0, jInvariant_A(A0), P2e, Q2e, xP2e, xQ2e, xPQ2e, xP2e_id2iso_d2, xQ2e_id2iso_d2, xPQ2e_is2iso_d2, DegreesOddTorsionBases, ExponentsOddTorsionBases, OddTorsionBases, Matrices_2e, M44inv_chall, M44inv_chall2, Matrices_odd, w, isomorphism_to_A0, dlog_data_full, dlog_data_chall, dlog_data_chall2, dlog_data_res, tp_table)
end

# Fp2 and values in Fp2
function make_precomputed_values()
    Fp2, E0 = make_E0_data()

    precomputed_orders_data = [order_data_2, order_data_13, order_data_15]
    orders_data = [compute_order(Fp2, E0, order_data) for order_data in precomputed_orders_data]
    @assert orders_data[1].j_inv == 8000
    @assert orders_data[2].j_inv^2 - 6896880000*orders_data[2].j_inv - 567663552000000 == 0
    @assert orders_data[3].j_inv^2 + 191025*orders_data[3].j_inv - 121287375 == 0

    return GlobalData(E0, orders_data)
end